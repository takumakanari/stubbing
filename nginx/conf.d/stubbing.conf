init_by_lua '
  REDIS_HOST = os.getenv("STUBBING_REDIS_HOST") or "localhost"
  REDIS_PORT = tonumber(os.getenv("STUBBING_REDIS_PORT") or "6379")
  REDIS_KEY_PREFIX = "stubbing:"
';


server {
  listen *:4567;

  charset utf8;

  location / {
    content_by_lua '
      local redis = require "resty.redis"
      local cjson = require "cjson"

      ngx.req.read_body()
      local body_data = ngx.req.get_body_data()

      local path = ngx.var.uri

      local uri_args = ngx.req.get_uri_args()

      local rwait = uri_args["rwait"]
      if rwait == nil then
        rwait = 0
      else
        rwait = tonumber(rwait) -- TODO check converted correctly
      end


      local red = redis:new()
      red:set_timeout(1000)

      local ok, err = red:connect(REDIS_HOST, REDIS_PORT)
      if not ok then
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.say("failed to connect to redis: ", err)
        return
      end


      local method = ngx.req.get_method()
      local redis_key_prefix = REDIS_KEY_PREFIX .. path .. ":"
      local redis_data_key = redis_key_prefix .. "data"
      local redis_rwait_key = redis_key_prefix .. "rwait"

      if method == "POST" then
        local ok, err = red:set(redis_data_key, body_data)
        if not ok then
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.say("failed to save data to redis: ", err)
          return
        end

        local ok, err = red:set(redis_rwait_key, rwait)
        if not ok then
          ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
          ngx.say("failed to save data to redis: ", err)
          return
        end

        ngx.say(cjson.encode({path = path, rwait = rwait, status = "created"}))
      elseif method == "GET" then
        local stub_data, err = red:get(redis_data_key)
        if stub_data == ngx.null then
          ngx.status = ngx.HTTP_NOT_FOUND
          ngx.say("data not found: ", err)
          return
        end

        local rwait, _ = red:get(redis_rwait_key)

        ngx.say(cjson.encode({path = path, rwait = rwait, data = stub_data}))
      elseif method == "DELETE" then
        for i, v in pairs({redis_data_key, redis_rwait_key}) do
          local ok, err = red:del(v)
          if not ok then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("failed to delete data in redis", err)
            return
          end
        end
        ngx.say(cjson.encode({path = path, status = "deleted"}))
      else
        ngx.status = ngx.HTTP_NOT_ALLOWED
        return
      end
    ';
  }

}


server {
  listen *:80;

  charset utf8;
  charset_types text/css text/xml text/plain;

  access_log off;
  error_page 405 = $uri;

  location / {
    rewrite_by_lua '
      local redis = require "resty.redis"
      local random = require "resty.random"

      local red = redis:new()
      red:set_timeout(1000)

      local ok, err = red:connect(REDIS_HOST, REDIS_PORT)
      if not ok then
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.say("failed to connect to redis: ", err)
        return
      end


      local redis_key_prefix = REDIS_KEY_PREFIX .. ngx.var.uri .. ":"

      local stub_data, err = red:get(redis_key_prefix .. "data")
      if stub_data == ngx.null then
        ngx.status = ngx.HTTP_NOT_FOUND
        ngx.say("stub data is not registered. You can craete new data for stubbing by the following command:")
        ngx.say("  $ curl -XPOST -d @yourdata " .. ngx.var.host .. ngx.var.uri .. "?rwait=20")
        ngx.say("enjoy stubbing!")
        return
      end

      local wait_to_res, err = red:get(redis_key_prefix .. "rwait")
      if wait_to_res == ngx.null then
        wait_to_res = 0
      end

      ngx.sleep(math.random(wait_to_res))
      ngx.say(stub_data)
    ';
  }
}