daemon off;

user                    nginx;
worker_processes        auto;

error_log  /dev/stderr  info;

events {
    worker_connections  2048;
    multi_accept on;
    accept_mutex_delay  100ms;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    open_file_cache max=100000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;

    keepalive_timeout 5 6;
    keepalive_requests 20;

    gzip on;
    gzip_http_version 1.0;
    gzip_types        text/plain
                      text/xml
                      text/css
                      application/xml
                      application/xhtml+xml
                      application/rss+xml
                      application/atom_xml
                      application/javascript
                      application/x-javascript
                      application/x-httpd-php
                      image/png image/gif
                      image/jpeg;
    gzip_disable      "MSIE [1-6]\.";
    gzip_disable      "Mozilla/4";
    gzip_comp_level   6;
    gzip_proxied      any;
    gzip_vary         on;
    gzip_buffers      4 8k;
    gzip_min_length   20;


    init_by_lua '
      REDIS_HOST = "192.168.64.2" -- TODO get from ENV?
      REDIS_PORT = 6379;          -- TODO get from ENV?
    ';


    server {
      listen *:4567;

      charset utf8;

      location = /v1/data {
        content_by_lua '
          local redis = require "resty.redis"
          local cjson = require "cjson"

          ngx.req.read_body()
          local body_data = ngx.req.get_body_data()


          local uri_args = ngx.req.get_uri_args()
          local path = uri_args["path"]
          local rwait = uri_args["rwait"]

          if path == nil then
            ngx.status = ngx.HTTP_BAD_REQUEST
            ngx.say("parameter is not valid: path is required!")
            return
          end

          if rwait == nil then
            rwait = 0
          else
            rwait = tonumber(rwait) -- TODO check converted correctly
          end


          local red = redis:new()
          red:set_timeout(1000)

          local ok, err = red:connect(REDIS_HOST, REDIS_PORT)
          if not ok then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("failed to connect to redis: ", err)
            return
          end


          local redis_key_prefix = "stubbing:" .. path .. ":"
          local ok, err = red:set(redis_key_prefix .. "data", body_data)
          if not ok then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("failed to save data to redis: ", err)
            return
          end

          local ok, err = red:set(redis_key_prefix .. "rwait", rwait)
          if not ok then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("failed to save data to redis: ", err)
            return
          end


          ngx.say(cjson.encode({path = path, rwait = rwait}))
        ';
      }

    }


    server {
      listen *:80;

      charset utf8;
      charset_types text/css text/xml text/plain;

      access_log off;
      error_page 405 = $uri;

      location / {
        rewrite_by_lua '
          local redis = require "resty.redis"
          local random = require "resty.random"

          local red = redis:new()
          red:set_timeout(1000)

          local ok, err = red:connect(REDIS_HOST, REDIS_PORT)
          if not ok then
            ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
            ngx.say("failed to connect to redis: ", err)
            return
          end


          local redis_key_prefix = "stubbing:" .. ngx.var.uri .. ":"

          local stub_data, err = red:get(redis_key_prefix .. "data")
          if stub_data == ngx.null then
            ngx.status = ngx.HTTP_NOT_FOUND
            ngx.say([[stub data is empty
             You can craete new data for stubbing by the following command:

              $ curl -XPOST -d @mydata.json "<host-of-stubbing>/v1/data?path=/your/path&rwait=20"

             enjoy stubbing!
            ]])
            return
          end

          local wait_to_res, err = red:get(redis_key_prefix .. "rwait")
          if wait_to_res == ngx.null then
            wait_to_res = 0
          end

          ngx.sleep(math.random(wait_to_res))
          ngx.say(stub_data)
        ';
      }
    }

}
